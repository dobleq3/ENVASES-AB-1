import toast from "react-hot-toast";

export function connectWebSocket(onMessage, maxRetries = 5) {
  const WS_URL = import.meta.env.VITE_WS_URL;
  let retries = 0;
  let socket;
  let reconnectTimeout;

  function initWebSocket() {
    socket = new WebSocket(`${WS_URL}/ws`);

    socket.onopen = () => {
      retries = 0;
      console.log("‚úÖ WebSocket conectado");

      // üîπ Cierra cualquier toast de reconexi√≥n
      toast.dismiss("reconnect-toast");

      toast.success("üîó Conexi√≥n WebSocket establecida");
    };

    socket.onmessage = (event) => {
      console.log("üì© Mensaje recibido:", event.data);
      onMessage(event.data);
    };

    socket.onerror = (err) => {
      console.error("‚ùå Error WebSocket:", err);
    };

    socket.onclose = () => {
      console.warn("‚ö†Ô∏è WebSocket cerrado");
      if (retries < maxRetries) {
        retries++;
        const delay = Math.min(1000 * retries, 10000); // backoff hasta 10s m√°x
        console.log(`‚è≥ Reintentando conexi√≥n en ${delay / 1000}s...`);

        // üîπ Mostrar/actualizar un √∫nico toast de reconexi√≥n
        toast.loading(`Reconectando WebSocket... (${retries}/${maxRetries})`, {
          id: "reconnect-toast",
        });

        reconnectTimeout = setTimeout(initWebSocket, delay);
      } else {
        toast.error("‚ùå No se pudo reconectar al WebSocket");
      }
    };
  }

  // Inicializar conexi√≥n
  initWebSocket();

  return {
    getSocket: () => socket,
    close: () => {
      if (reconnectTimeout) clearTimeout(reconnectTimeout);
      if (socket) socket.close();
    },
  };
}
